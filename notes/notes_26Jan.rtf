{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs24 \cf0 26 Jan 2011\
\
- When passing from a single tcp communication to multicast tcp communication, using my own library version, i'd a problem with the generation of single message ids. Previously the ids were generated using the ip address associated to the tcp socket, but now i have 2 or more ips pointing to servers to connect. So I resolved the problem using java UUIDS to generate unique universal identifiers, particularly the Jug project library i've found on the internet (github.com/cowtowncoder/java-uuid-generator). \
\
In some tests performed by anonymous users, it is possible to see that jug, in most of the cases, is faster than java's uuid package. ()\
\
- See if expiring map is necessary? No because callbacks remove itself from the map when all waiting messages arrive or a associated timeout is reached.  \
\
\
\
}